(defparameter *map* #(("、" ",")
					  ("。" ".")
					  ("ぁ" "xa" #|"la"|#)
					  ("あ" "a")
					  ("ぃ" "xi" #|"xyi" "lyi" "li"|#)
					  ("い" "i" #|"yi"|#)
					  ("いぇ" "ye")
					  ("ぅ" "xu" #|"lu"|#)
					  ("う" "u" #|"wu"|#)
					  ("うぃ" "wi")
					  ("うぇ" "we")
					  ("ぇ" "xe" #|"xye" "lye" "le"|#)
					  ("え" "e")
					  ("ぉ" "xo" #|"lo"|#)
					  ("お" "o")
					  ("か" "ka" #|"ca"|#)
					  ("が" "ga")
					  ("き" "ki")
					  ("きぃ" "kyi")
					  ("きぇ" "kye")
					  ("きゃ" "kya")
					  ("きゅ" "kyu")
					  ("きょ" "kyo")
					  ("ぎ" "gi")
					  ("ぎぃ" "gyi")
					  ("ぎぇ" "gye")
					  ("ぎゃ" "gya")
					  ("ぎゅ" "gyu")
					  ("ぎょ" "gyo")
					  ("く" "ku" #|"qu" "kwu" "cu"|#)
					  ("くぁ" "qa")
					  ("くぃ" "qi" #|"qyi" "kwi"|#)
					  ("くぇ" "qe" #|"qye" "kwe"|#)
					  ("くぉ" "qo" #|"kwo"|#)
					  ("くゃ" "qya")
					  ("くゅ" "qyu")
					  ("くょ" "qyo")
					  ("くゎ" "kwa")
					  ("ぐ" "gu" #|"gwu"|#)
					  ("ぐぁ" "gwa")
					  ("ぐぃ" "gwi")
					  ("ぐぇ" "gwe")
					  ("ぐぉ" "gwo")
					  ("け" "ke")
					  ("げ" "ge")
					  ("こ" "ko" #|"co"|#)
					  ("ご" "go")
					  ("さ" "sa")
					  ("ざ" "za")
					  ("し" "si" "shi" #|"ci"|#)
					  ("しぃ" "syi")
					  ("しぇ" "sye" "she")
					  ("しゃ" "sya" "sha")
					  ("しゅ" "syu" "shu")
					  ("しょ" "syo" "sho")
					  ("じ" "zi" "ji")
					  ("じぃ" "zyi" "jyi")
					  ("じぇ" "je" #|"zye" "jye"|#)
					  ("じゃ" "ja" #|"zya" "jya"|#)
					  ("じゅ" "ju" #|"zyu" "jyu"|#)
					  ("じょ" "jo" #|"zyo" "jyo"|#)
					  ("す" "su")
					  ("ず" "zu")
					  ("せ" "se" #|"ce"|#)
					  ("ぜ" "ze")
					  ("そ" "so")
					  ("ぞ" "zo")
					  ("た" "ta")
					  ("だ" "da")
					  ("ち" "ti" "chi")
					  ("ちぃ" "tyi"       #|"cyi"|#)
					  ("ちぇ" "tye" "che" #|"cye"|#)
					  ("ちゃ" "tya" "cha" #|"cya"|#)
					  ("ちゅ" "tyu" "chu" #|"cyu"|#)
					  ("ちょ" "tyo" "cho" #|"cyo"|#)
					  ("ぢ" "di")
					  ("ぢぃ" "dyi")
					  ("ぢぇ" "dye")
					  ("ぢゃ" "dya")
					  ("ぢょ" "dyo")
					  ("っ" :small-tu #|"xtu" "xtsu"|#)
					  ("つ" "tu" "tsu")
					  ("つぁ" "tsa")
					  ("つぃ" "tsi")
					  ("つぇ" "tse")
					  ("つぉ" "tso")
					  ("づ" "du")
					  ("て" "te")
					  ("てぃ" "thi")
					  ("てぇ" "the")
					  ("てゃ" "tha")
					  ("てゅ" "thu")
					  ("てょ" "tho")
					  ("で" "de")
					  ("でぃ" "dhi")
					  ("でぇ" "dhe")
					  ("でゃ" "dha")
					  ("でゅ" "dyu" #|"dhu"|#)
					  ("でょ" "dho")
					  ("と" "to")
					  ("ど" "do")
					  ("な" "na")
					  ("に" "ni")
					  ("にぃ" "nyi")
					  ("にぇ" "nye")
					  ("にゃ" "nya")
					  ("にゅ" "nyu")
					  ("にょ" "nyo")
					  ("ぬ" "nu")
					  ("ね" "ne")
					  ("の" "no")
					  ("は" "ha")
					  ("ば" "ba")
					  ("ぱ" "pa")
					  ("ひ" "hi")
					  ("ひぃ" "hyi")
					  ("ひぇ" "hye")
					  ("ひゃ" "hya")
					  ("ひゅ" "hyu")
					  ("ひょ" "hyo")
					  ("び" "bi")
					  ("びぃ" "byi")
					  ("びぇ" "bye")
					  ("びゃ" "bya")
					  ("びゅ" "byu")
					  ("びょ" "byo")
					  ("ぴ" "pi")
					  ("ぴぃ" "pyi")
					  ("ぴぇ" "pye")
					  ("ぴゃ" "pya")
					  ("ぴゅ" "pyu")
					  ("ぴょ" "pyo")
					  ("ふ" "hu" "fu")
					  ("ふぁ" "fa")
					  ("ふぃ" "fi")
					  ("ふぇ" "fe")
					  ("ふぉ" "fo")
					  ("ぶ" "bu")
					  ("ぷ" "pu")
					  ("へ" "he")
					  ("べ" "be")
					  ("ぺ" "pe")
					  ("ほ" "ho")
					  ("ぼ" "bo")
					  ("ぽ" "po")
					  ("ま" "ma")
					  ("み" "mi")
					  ("みぃ" "myi")
					  ("みぇ" "mye")
					  ("みゃ" "mya")
					  ("みゅ" "myu")
					  ("みょ" "myo")
					  ("む" "mu")
					  ("め" "me")
					  ("も" "mo")
					  ("ゃ" "xya" #|"lya"|#)
					  ("や" "ya")
					  ("ゅ" "xyu" #|"lyu"|#)
					  ("ゆ" "yu")
					  ("ょ" "xyo" #|"lyo"|#)
					  ("よ" "yo")
					  ("ら" "ra")
					  ("り" "ri")
					  ("りぃ" "ryi")
					  ("りぇ" "rye")
					  ("りゃ" "rya")
					  ("りゅ" "ryu")
					  ("りょ" "ryo")
					  ("る" "ru")
					  ("れ" "re")
					  ("ろ" "ro")
					  ("ゎ" "xwa" #|"lwa"|#)
					  ("わ" "wa")
					  ("を" "wo")
					  ("ん" "n'")
					  ("ゔ" "vu")
					  ("ゔぁ" "va")
					  ("ゔぃ" "vi")
					  ("ゔぇ" "ve")
					  ("ゔぉ" "vo")
					  ("ァ" "xa" #|"la"|#)
					  ("ア" "a")
					  ("ィ" "xi" #|"xyi" "lyi" "li"|#)
					  ("イ" "i" #|"yi"|#)
					  ("イェ" "ye")
					  ("ゥ" "xu" #|"lu"|#)
					  ("ウ" "u" #|"wu"|#)
					  ("ウィ" "wi")
					  ("ウェ" "we")
					  ("ェ" "xe" #|"xye" "lye" "le"|#)
					  ("エ" "e")
					  ("ォ" "xo" #|"lo"|#)
					  ("オ" "o")
					  ("カ" "ka" #|"ca"|#)
					  ("ガ" "ga")
					  ("キ" "ki")
					  ("キィ" "kyi")
					  ("キェ" "kye")
					  ("キャ" "kya")
					  ("キュ" "kyu")
					  ("キョ" "kyo")
					  ("ギ" "gi")
					  ("ギィ" "gyi")
					  ("ギェ" "gye")
					  ("ギャ" "gya")
					  ("ギュ" "gyu")
					  ("ギョ" "gyo")
					  ("ク" "ku" #|"qu" "kwu" "cu"|#)
					  ("クァ" "qa")
					  ("クィ" "qi" #|"qyi" "kwi"|#)
					  ("クェ" "qe" #|"qye" "kwe"|#)
					  ("クォ" "qo" #|"kwo"|#)
					  ("クャ" "qya")
					  ("クュ" "qyu")
					  ("クョ" "qyo")
					  ("クヮ" "kwa")
					  ("グ" "gu" #|"gwu"|#)
					  ("グァ" "gwa")
					  ("グィ" "gwi")
					  ("グェ" "gwe")
					  ("グォ" "gwo")
					  ("ケ" "ke")
					  ("ゲ" "ge")
					  ("コ" "ko" #|"co"|#)
					  ("ゴ" "go")
					  ("サ" "sa")
					  ("ザ" "za")
					  ("シ" "si" "shi" #|"ci"|#)
					  ("シィ" "syi")
					  ("シェ" "sye" "she")
					  ("シャ" "sya" "sha")
					  ("シュ" "syu" "shu")
					  ("ショ" "syo" "sho")
					  ("ジ" "zi" "ji")
					  ("ジィ" "zyi" "jyi")
					  ("ジェ" "je" #|"zye" "jye"|#)
					  ("ジャ" "ja" #|"zya" "jya"|#)
					  ("ジュ" "ju" #|"zyu" "jyu"|#)
					  ("ジョ" "jo" #|"zyo" "jyo"|#)
					  ("ス" "su")
					  ("ズ" "zu")
					  ("セ" "se" #|"ce"|#)
					  ("ゼ" "ze")
					  ("ソ" "so")
					  ("ゾ" "zo")
					  ("タ" "ta")
					  ("ダ" "da")
					  ("チ" "ti" "chi")
					  ("チィ" "tyi" "cyi")
					  ("チェ" "tye" "che" #|"cye"|#)
					  ("チャ" "tya" "cha" #|"cya"|#)
					  ("チュ" "tyu" "chu" #|"cyu"|#)
					  ("チョ" "tyo" "cho" #|"cyo"|#)
					  ("ヂ" "di")
					  ("ヂィ" "dyi")
					  ("ヂェ" "dye")
					  ("ヂャ" "dya")
					  ("ヂョ" "dyo")
					  ("ッ" :small-tu #|"xtu" "xtsu"|#)
					  ("ツ" "tu" "tsu")
					  ("ツァ" "tsa")
					  ("ツィ" "tsi")
					  ("ツェ" "tse")
					  ("ツォ" "tso")
					  ("ヅ" "du")
					  ("テ" "te")
					  ("ティ" "thi")
					  ("テェ" "the")
					  ("テャ" "tha")
					  ("テュ" "thu")
					  ("テョ" "tho")
					  ("デ" "de")
					  ("ディ" "dhi")
					  ("デェ" "dhe")
					  ("デャ" "dha")
					  ("デュ" "dyu" #|"dhu"|#)
					  ("デョ" "dho")
					  ("ト" "to")
					  ("ド" "do")
					  ("ナ" "na")
					  ("ニ" "ni")
					  ("ニィ" "nyi")
					  ("ニェ" "nye")
					  ("ニャ" "nya")
					  ("ニュ" "nyu")
					  ("ニョ" "nyo")
					  ("ヌ" "nu")
					  ("ネ" "ne")
					  ("ノ" "no")
					  ("ハ" "ha")
					  ("バ" "ba")
					  ("パ" "pa")
					  ("ヒ" "hi")
					  ("ヒィ" "hyi")
					  ("ヒェ" "hye")
					  ("ヒャ" "hya")
					  ("ヒュ" "hyu")
					  ("ヒョ" "hyo")
					  ("ビ" "bi")
					  ("ビィ" "byi")
					  ("ビェ" "bye")
					  ("ビャ" "bya")
					  ("ビュ" "byu")
					  ("ビョ" "byo")
					  ("ピ" "pi")
					  ("ピィ" "pyi")
					  ("ピェ" "pye")
					  ("ピャ" "pya")
					  ("ピュ" "pyu")
					  ("ピョ" "pyo")
					  ("フ" "hu" "fu")
					  ("ファ" "fa")
					  ("フィ" "fi")
					  ("フェ" "fe")
					  ("フォ" "fo")
					  ("ブ" "bu")
					  ("プ" "pu")
					  ("ヘ" "he")
					  ("ベ" "be")
					  ("ペ" "pe")
					  ("ホ" "ho")
					  ("ボ" "bo")
					  ("ポ" "po")
					  ("マ" "ma")
					  ("ミ" "mi")
					  ("ミィ" "myi")
					  ("ミェ" "mye")
					  ("ミャ" "mya")
					  ("ミュ" "myu")
					  ("ミョ" "myo")
					  ("ム" "mu")
					  ("メ" "me")
					  ("モ" "mo")
					  ("ャ" "xya" #|"lya"|#)
					  ("ヤ" "ya")
					  ("ュ" "xyu" #|"lyu"|#)
					  ("ユ" "yu")
					  ("ョ" "xyo" #|"lyo"|#)
					  ("ヨ" "yo")
					  ("ラ" "ra")
					  ("リ" "ri")
					  ("リィ" "ryi")
					  ("リェ" "rye")
					  ("リャ" "rya")
					  ("リュ" "ryu")
					  ("リョ" "ryo")
					  ("ル" "ru")
					  ("レ" "re")
					  ("ロ" "ro")
					  ("ヮ" "xwa" #|"lwa"|#)
					  ("ワ" "wa")
					  ("ヲ" "wo")
					  ("ン" "n'")
					  ("ヴ" "vu")
					  ("ヴァ" "va")
					  ("ヴィ" "vi")
					  ("ヴェ" "ve")
					  ("ヴォ" "vo")
					  ("ー" "-")
					  ("！" "!")
					  ("？" "?")))

;; 長さ一致で最初の前方マッチエントリを全検索する関数
;; ex) (enum-tokens "くぃんてっと") => ((("qyi" "qi" "kwi")     . "んてっと")
;;                                      (("qu" "kwu" "ku" "cu") . "ぃんてっと"))
(defun enum-tokens (string)
  (labels ((recur (index count acc)
			 (if (= index (length *map*))
				 (progn
				   (when (zerop count)
					 (push (cons (list (subseq string 0 1)) (subseq string 1)) acc))
				   (nreverse acc))
				 (let* ((entry  (aref *map* index))
						(length (length (first entry))))
				   (when (and (<= length (length string))
							  (string= (first entry) string :start2 0 :end2 length))
					 (incf count)
					 (push (cons (cdr entry) (subseq string length)) acc))
				   (recur (1+ index) count acc)))))
	(recur 0 0 nil)))

(defun fix-element (elm next)
  (if (eq elm :small-tu)
	  (if (null next)
		  "xtu"            ;; 末尾の :small-tu は xtu にするが、このせいで最終出力に重複が生じる
		  (subseq next 0 1))
	  (if (string= elm "n'")
		  (if (or (null next)
				  (null (position (char next 0) "aiueony")))
			  "n"
			  "n'")
		  elm)))


(defun fix-pattern (pattern-lst)
  (with-output-to-string (out)
	(labels ((recur (lst)
			   (when lst
				 (format out "~A" (fix-element (car lst) (cadr lst)))
				 (recur (cdr lst)))))
	  (recur pattern-lst))))

(defun convert-kana-to-pattern (string)
  (let ((results nil))
	(labels ((recur (data lst)
			   (if (zerop (length data))
				   (push (fix-pattern (reverse lst)) results)
				   (dolist (token (enum-tokens data))
					 (destructuring-bind (patterns . rest) token
					   (dolist (pattern patterns)
						 (push pattern lst)
						 (recur rest lst)
						 (pop lst)))))))
	  (recur string nil)
	  (if (null results)
		  (list string)
		  (remove-duplicates (sort results #'string<) :test #'string=)))))

(defun convert-file (filespec acc)
  (dolist (entry (with-open-file (in filespec)
				   (read in)))
	(dolist (kana (cdr entry))
	  (dolist (pattern (convert-kana-to-pattern kana))
		(push (cons pattern (car entry)) acc))))
  acc)

(defun convert-emoji-file (filespec acc)
  (dolist (entry (with-open-file (in filespec)
				   (read in)))
	(let ((code (car entry)))
	  (dolist (pattern (cdr entry))
		(push (cons pattern code) acc))))
  acc)

(defun create-staticdic (outfile prefix &rest data-files)
  (let ((result nil))
	(dolist (file data-files)
	  (setf result (convert-file file result)))
	(setf result (sort result (lambda (e1 e2)
								(cond
								  ((string< (car e1) (car e2))   t)
								  ((string< (car e2) (car e1)) nil)
								  (t (string< (cdr e1) (cdr e2)))))))
	(when (and prefix (< 0 (length prefix)))
	  (dolist (entry result)
		(setf (car entry) (concatenate 'string prefix (car entry)))))
	(with-open-file (out outfile :direction :output :if-exists :supersede)
	  (format out ";;-*-MODE:lisp-*-~%")
	  (format out "#(~%")
	  (dolist (entry result)
		(format out "~S~%" entry))
	  (format out ")~%"))))

(defun create-emojidic (outfile data-file)
  (let ((result (convert-emoji-file data-file nil)))
	(setf result (sort result (lambda (e1 e2)
								(cond
								  ((string< (car e1) (car e2))   t)
								  ((string< (car e2) (car e1)) nil)
								  (t (< (cdr e1) (cdr e2)))))))
	(with-open-file (out outfile :direction :output :if-exists :supersede)
	  (format out ";;-*-MODE:lisp-*-~%")
	  (format out "#(~%")
	  (dolist (entry result)
		(format out "(\"e'~A\" . #x~X)~%" (car entry) (cdr entry)))
	  (format out ")~%"))))



(progn
  (create-staticdic "./output/08.static.dict"   nil   "./08.static.hiragana.data"
                                                      "./08.static.katakana.data"
                                                      "./08.static.normal.data"
                                                      "./08.static.okurigana.data"
                                                      "./08.static.symbols.data")
  (create-staticdic "./output/09.tankanji.dict" nil   "./09.tankanji.data")
  (create-staticdic "./output/0A.4jijukgo.dict" nil   "./0A.4jijukgo.data")
  (create-emojidic  "./output/0B.emoji.dict"          "./0B.emoji.data")
  (create-staticdic "./output/0C.address.dict"  "ad'" "./0C.address.data"))
